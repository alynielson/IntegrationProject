@model IntegrationProject.Models.Event

@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>
<style>
    #map {
        height: 400px;
        width: 100%;
    }
</style>
<body>
   

<div class="col-md-6">
    <h4>Event</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Date)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Date)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Details)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Details)
        </dd>
        <dt>
            Starting Location
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Origin.Name)
        </dd>
        <dt>
            Ending Location
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Destination.Name)
        </dd>
        <dt>
            Stops
        </dt>
        <dd>
            @foreach (var item in Model.Waypoints)
            {
                <div>@item.Name</div>
            }
        </dd>
       
        <dt>
            Owner
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ApplicationUser.Email)
        </dd>

    </dl>
</div>
<div>
    <a asp-action="Events" asp-controller="Member" asp-route-id="@Model.ApplicationUserId">Back to List</a>
</div>
    
    <div class="col-md-6">
      <div id="map"></div>
    </div>
    <script>
        function initMap() {
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 15,
                center: { lat: 43.031605, lng: -87.909850 }
            });
            var originMarker = new google.maps.Marker({ position: { lat: Number(@Model.Origin.Latitude), lng: Number(@Model.Origin.Longitude) } });
            var destinationMarker = new google.maps.Marker({ position: { lat: Number(@Model.Destination.Latitude), lng:Number(@Model.Destination.Longitude)}});
            directionsDisplay.setMap(map);
            var waypoints = [];
            @for(int i = 0; i < Model.Waypoints.Count; i++)
            {
                @:waypoints.push({ location: { lat: Number(@Model.Waypoints[i].Latitude), lng: Number(@Model.Waypoints[i].Longitude) }, stopover: true });
            }

            var newWaypoints = waypoints.map(function (waypoint) {
                new google.maps.Marker({ position: { lat: Number(waypoint.lat), lng: Number(waypoint.lng) } });
                if (waypoints.length > 0) {
                    calculateAndDisplayRoute(directionsService, directionsDisplay, originMarker, destinationMarker, waypoints);
                }
               
                
            })
            if (newWaypoints.length === 0) {
                calcRouteWithoutWaypoints(directionsService, directionsDisplay, originMarker, destinationMarker);
            }
            

        }

        function calcRouteWithoutWaypoints(directionsService, directionsDisplay, originMarker, destinationMarker) {
            
                directionsService.route({
                    origin: originMarker.position,
                    destination: destinationMarker.position,

                    travelMode: 'WALKING'
                }, function (response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);

                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            
        }

        function calculateAndDisplayRoute(directionsService, directionsDisplay, originMarker, destinationMarker, newWaypoints) {
            
                directionsService.route({
                    origin: originMarker.position,
                    destination: destinationMarker.position,
                    waypoints: newWaypoints,
                    optimizeWaypoints: true,
                    travelMode: 'WALKING'
                }, function (response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);

                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            
           

        }
        
        
    </script>
    
    <script defer
            src="https://maps.googleapis.com/maps/api/js?key=@($"{Credentials.GOOGLEAPI}")&callback=initMap">
    </script>
</body>

